services:
  # FastAPI Application
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      # Override host-provided DATABASE_URL when running in Docker so the
      # API connects to the postgres container on the compose network.
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
    depends_on:
      - postgres
    networks:
      - todo-network
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - todo-network
    # Nginx reverse proxy — serves the frontend and proxies API routes to the api service
  nginx:
    image: nginx:alpine
    ports:
      - "3000:80"
    volumes:
      - ./nginx.d:/etc/nginx/conf.d:ro
    depends_on:
      - frontend
      - api
    networks:
      - todo-network
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # frontend continues to run its static server on 3000 inside the network,
      # but we do NOT publish it to the host anymore — nginx will expose port 3000
    networks:
      - todo-network
    depends_on:
      - api

volumes:
  postgres_data:

networks:
  todo-network:
    driver: bridge

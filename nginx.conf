server {
  listen 80;
  server_name localhost;
  # -- Global CORS headers (development) --
  # These headers are applied to all responses. Use a specific origin in production.
  add_header 'Access-Control-Allow-Origin' '*' always;
  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
  add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;

  # Proxy API calls to the internal api service
  location ^~ /auth/ {
    proxy_pass http://api:8000/auth/;
    # forward the original Host header (including port) so the API constructs
    # redirects/URLs using the same host the browser used (avoids incorrect
    # absolute redirects to a different origin)
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header X-Forwarded-Host $http_host;
    # Handle preflight requests locally so the API doesn't have to.
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
      add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
      return 204;
    }

    # Rewrite any absolute Location header coming from upstream to a relative
    # path so redirects remain on the browser origin. This covers cases where
    # the API emits absolute redirect URLs with a different host/port.
    # Explicitly rewrite common absolute upstream Location formats to include
    # the browser-visible port (3000) when the upstream omitted it.
    proxy_redirect http://localhost/ http://localhost:3000/;
    proxy_redirect http://127.0.0.1/ http://127.0.0.1:3000/;
    # Fallback regex: preserve original scheme and host (may include port)
    proxy_redirect ~^https?://[^/]+(/.*)$ $scheme://$http_host$1;
  }

  location ^~ /todos/ {
    proxy_pass http://api:8000/todos/;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header X-Forwarded-Host $http_host;
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
      add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
      return 204;
    }

    proxy_redirect http://localhost/ http://localhost:3000/;
    proxy_redirect http://127.0.0.1/ http://127.0.0.1:3000/;
    proxy_redirect ~^https?://[^/]+(/.*)$ $scheme://$http_host$1;
  }

  # Exact match for /todos (no trailing slash) to avoid falling through to
  # the frontend and generating a redirect. Proxy to the API without adding
  # or stripping slashes so the backend handles it consistently.
  location = /todos {
    proxy_pass http://api:8000/todos;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $http_host;
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
      add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
      return 204;
    }
    proxy_redirect http://localhost/ http://localhost:3000/;
    proxy_redirect http://127.0.0.1/ http://127.0.0.1:3000/;
    proxy_redirect ~^https?://[^/]+(/.*)$ $scheme://$http_host$1;
  }

  # All other requests (static assets / SPA) proxy to the frontend container
  location / {
    proxy_pass http://frontend:3000/;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  client_max_body_size 20M;
}
